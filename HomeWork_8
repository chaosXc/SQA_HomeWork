  Software quality assurance (SQA) consists of a means of monitoring the software engineering processes and methods 
used to ensure quality.[citation needed] The methods by which this is accomplished are many and varied, and may include
ensuring conformance to one or more standards, such as ISO 9000 or a model such as CMMI.
  SQA encompasses the entire software development process, which includes processes such as requirements definition, 
software design, coding, source code control, code reviews, software configuration management, testing, 
release management, and product integration. SQA is organized into goals, commitments, abilities, 
activities, measurements, and verifications.
  As more and more business processes are encoded in software, businesses can ill afford to treat quality as a late 
IT lifecycle concern. Gone are the days when testing is simply lip service paid to a compressed schedule that 
mandates deployment despite delayed application delivery with minimal analysis. Such an approach leads to cancelled
projects, missed deadlines, poor quality software, deployment inefficiencies and high rework costs. The cost of fixing
a defect found in a deployed application is 15 times higher than the cost of fixing that same defect during coding.
  From Mr. Tian's lession I learn varity knowledge about SQA. The main point is to make sure software have high quility,
to assurance a software, people need both test inspect and QA inspect. 
  Structural quality is evaluated through the analysis of the software inner structure, its source code, at the unit 
level, the technology level and the system level, which is in effect how its architecture adheres to sound principles
of software architecture outlined in a paper on the topic by OMG. In contrast, functional quality is typically enforced
and measured through software testing.
  Software quality measurement quantifies to what extent a software or system rates along each of these five dimensions.
An aggregated measure of software quality can be computed through a qualitative or a quantitative scoring scheme 
or a mix of both and then a weighting system reflecting the priorities. This view of software quality being positioned
on a linear continuum is supplemented by the analysis of "critical programming errors" that under specific 
circumstances can lead to catastrophic outages or performance degradations that make a given system unsuitable 
for use regardless of rating based on aggregated measurements. Such programming errors found at the system level 
represent up to 90% of production issues, whilst at the unit-level, even if far more numerous, programming errors 
account for less than 10% of production issues.
  The main quilty model is :
  Reliability: An attribute of resiliency and structural solidity. Reliability measures the level of risk and the 
likelihood of potential application failures. It also measures the defects injected due to modifications made to the
software (its “stability” as termed by ISO). The goal for checking and monitoring Reliability is to reduce and 
prevent application downtime, application outages and errors that directly affect users, and enhance the image of 
IT and its impact on a company’s business performance.
  Efficiency: The source code and software architecture attributes are the elements that ensure high performance
once the application is in run-time mode. Efficiency is especially important for applications in high execution speed
environments such as algorithmic or transactional processing where performance and scalability are paramount. 
An analysis of source code efficiency and scalability provides a clear picture of the latent business risks and 
the harm they can cause to customer satisfaction due to response-time degradation.
Security: A measure of the likelihood of potential security breaches due to poor coding practices and architecture.
This quantifies the risk of encountering critical vulnerabilities that damage the business.
Maintainability: Maintainability includes the notion of adaptability, portability and transferability (from one 
development team to another). Measuring and monitoring maintainability is a must for mission-critical applications
where change is driven by tight time-to-market schedules and where it is important for IT to remain responsive to
business-driven changes. It is also essential to keep maintenance costs under control.
Size: While not a quality attribute per se, the sizing of source code is a software characteristic that obviously 
impacts maintainability. Combined with the above quality characteristics, software size can be used to assess the
amount of work produced and to be done by teams, as well as their productivity through correlation with time-sheet
data, and other SDLC-related metrics.
